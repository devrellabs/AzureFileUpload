# Run when commits are pushed to main
on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_ENV_TYPE: ${{ vars.AZURE_ENV_TYPE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh


      - name: Provision Infrastructure
        run: azd provision --no-prompt

      - name: Package Application
        run: |
          echo "Before creating dist directory:"
          echo "Current working directory: $(pwd)"
          ls -la
          mkdir -p ./dist
          echo "After creating dist directory:"
          ls -la ./dist/
          azd package app --output-path ./dist/app-package.zip
          echo "After packaging:"
          ls -la ./dist/
          echo "Package created at: ./dist/app-package.zip"
          echo "Verifying package file exists:"
          if [ -f "./dist/app-package.zip" ]; then
            echo "✅ Package file confirmed: $(ls -la ./dist/app-package.zip)"
            echo "✅ Full path: $(realpath ./dist/app-package.zip)"
          else
            echo "❌ Package file not found!"
          fi

      - name: Deploy to Development
        run: azd deploy app --from-package ./dist/app-package.zip --no-prompt

      - name: Validate Application
        run: |
          echo "🔍 Validating application in development environment..."
          # TODO: Add actual validation here
          # Examples:
          # - Health checks and integration tests
          # - Security and compliance scanning
          # - Performance validation
          sleep 3  # Simulate validation time
          echo "✅ Application validation passed"

      - name: Promote to Production
        run: |
          # Debug: Check current directory and list files
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of ./dist directory:"
          ls -la ./dist/ || echo "dist directory not found"
          
          # Create production environment name by replacing -dev with -prod, or adding -prod if no -dev suffix
          PROD_ENV_NAME="${AZURE_ENV_NAME%-dev}-prod"
          echo "Production environment name: $PROD_ENV_NAME"
          
          # Set environment variables for this step
          export AZURE_ENV_NAME="$PROD_ENV_NAME"
          export AZURE_ENV_TYPE="prod"
          
          # Use the same package created earlier - true "build once, deploy everywhere"
          PACKAGE_PATH="./dist/app-package.zip"
          
          if [ -f "$PACKAGE_PATH" ]; then
            echo "🚀 Deploying to production using existing package: $PACKAGE_PATH"
            azd deploy app --from-package "$PACKAGE_PATH" --no-prompt
          else
            echo "❌ Package not found at $PACKAGE_PATH"
            echo "Searching for any zip files in the workspace:"
            find . -name "*.zip" -type f 2>/dev/null || echo "No zip files found"
            echo "This should not happen - falling back to regular deployment"
            azd deploy --no-prompt
          fi          